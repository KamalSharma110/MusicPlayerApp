{"version":3,"file":"static/js/493.3ee860f4.chunk.js","mappings":"mNA8CA,UArCiB,WACf,IAAMA,GAAeC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOH,YAAY,IAC7DI,GAAWC,EAAAA,EAAAA,MACXC,GAAMC,EAAAA,EAAAA,UAEZ,GAAoCC,EAAAA,EAAAA,MAA5BC,EAAI,EAAJA,KAAMC,EAAU,EAAVA,WAAYC,EAAK,EAALA,MAS1B,OANAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACH,QAAX,EAAAN,EAAIO,eAAO,OAAX,EAAaC,eAAe,CAAEC,SAAU,WACxCX,EAASY,EAAAA,EAAAA,gBAAuC,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,QACpD,GAAG,CAACb,EAAUK,KAIZ,qBAASS,UAAU,wCAAwCZ,IAAKA,EAAI,WAClE,eAAIY,UAAU,4CAA2C,SAAC,eAI1D,iBAAKA,UAAU,wBAAuB,UACnCR,IAAc,SAAC,IAAM,CAACS,MAAM,yBAC5BR,IAAS,SAAC,IAAK,IACH,OAAZX,QAAY,IAAZA,OAAY,EAAZA,EAAcoB,KAAI,SAACC,GAClB,OACE,SAAC,IAAQ,CAEPC,MAAOD,EAAKC,MACZC,SAAUF,GAFLA,EAAKG,GAKhB,SAIR,C","sources":["pages/TopSongs.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { playerSliceActions } from \"../store/store\";\r\n\r\nimport { useGetTopChartsQuery } from \"../services/spotify\";\r\nimport SongCard from \"../components/SongCard.jsx\";\r\nimport Loader from \"../components/Loader\";\r\nimport Error from \"../components/Error\";\r\n\r\nconst TopSongs = () => {\r\n  const currentSongs = useSelector(state => state.player.currentSongs);\r\n  const dispatch = useDispatch();\r\n  const ref = useRef();\r\n\r\n  const { data, isFetching, error } = useGetTopChartsQuery(); //this hook will not be executed on every re-render because redux cache the api calls and \r\n  //thus useEffect will not run on every re-render even though it has 'data' as its dependency\r\n\r\n  useEffect(() => {\r\n    ref.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    dispatch(playerSliceActions.setCurrentSongs(data?.tracks));\r\n  }, [dispatch, data]);\r\n\r\n\r\n  return (\r\n    <section className=\"col-12 col-lg-6 col-xl-7 mt-5 mt-lg-4\" ref={ref}>\r\n      <h4 className=\"text-white text-center text-sm-start my-3\">\r\n        Top Songs\r\n      </h4>\r\n\r\n      <div className=\"row g-2 g-sm-3 g-md-4\">\r\n        {isFetching && <Loader title=\"Loading Top Songs...\" />}\r\n        {error && <Error />}\r\n        {currentSongs?.map((song) => {\r\n          return (\r\n            <SongCard\r\n              key={song.id}\r\n              image={song.image}\r\n              songData={song}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TopSongs;\r\n"],"names":["currentSongs","useSelector","state","player","dispatch","useDispatch","ref","useRef","useGetTopChartsQuery","data","isFetching","error","useEffect","current","scrollIntoView","behavior","playerSliceActions","tracks","className","title","map","song","image","songData","id"],"sourceRoot":""}